name: Safe Local Testnet Action
description: Administer local testnets using the testnet binary
inputs:
  action:
    description: Start or stop a local testnet
    required: true
  build:
    description: Build the node manager from source. Useful for testing.
    type: boolean
    default: false
  faucet-path:
    description: The location of the faucet binary
  interval:
    description: Interval between node starts in milliseconds. Default is 1000.
    type: number
    default: 1000
  join:
    description: If set, any nodes that are launched will join an existing testnet.
    type: boolean
    default: false
  log_file_prefix:
    description: The prefix given to the log files that are uploaded. Logs are not uploaded if value not set.
  node-count: 
    description: The number of nodes for the testnet. Defaults to 25.
    type: number
    default: 25
  node-manager-branch:
    description: Use with the build argument to specify the branch to build
    default: main
  node-manager-repo-owner:
    description: Use with the build argument to specify the repository to use
    default: maidsafe
  node-path:
    description: The location of the node binary
  owner:
    description: >
      Assign each node this owner. This argument and `owner-prefix` are mutually exclusive.
  owner-prefix:
    description: >
      Each node will be assigned an individual owner, based on this prefix.
      This argument and `owner-prefix` are mutually exclusive.
  platform:
    description: The platform the action is running on
    required: true
  set-safe-peers:
    description: There are some cases where setting SAFE_PEERS must be skipped
    type: boolean
    default: true

runs:
  using: "composite"
  steps:
    #
    # Setup
    #
    - name: install jq and ripgrep ubuntu
      if: inputs.platform == 'ubuntu-latest'
      shell: bash
      run: sudo apt-get -y install jq ripgrep
    - name: install jq and ripgrep mac
      if: inputs.platform == 'macos-latest'
      shell: bash
      run: brew install jq ripgrep
    - name: install jq and ripgrep windows
      if: inputs.platform == 'windows-latest'
      shell: pwsh
      run: choco install jq ripgrep
    #
    # Starting the Network
    #
    - name: install testnet (linux)
      if: inputs.platform == 'ubuntu-latest' && inputs.action == 'start'
      env:
        NODE_MANAGER_URL: https://sn-node-manager.s3.eu-west-2.amazonaws.com/safenode-manager-latest-x86_64-unknown-linux-musl.tar.gz
      shell: bash
      run: |
        if [[ "${{ inputs.build }}" == "true" ]]; then
          cargo build --release --bin safenode-manager
          sudo mv target/release/safenode-manager /usr/local/bin
        else
          echo "Support for downloading the node manager will be implemented soon"
          exit 1
        fi

    - name: install testnet (macOS)
      if: inputs.platform == 'macos-latest' && inputs.action == 'start'
      env:
        NODE_MANAGER_URL: https://sn-node-manager.s3.eu-west-2.amazonaws.com/safenode-manager-latest-x86_64-apple-darwin.tar.gz
      shell: bash
      run: |
        if [[ "${{ inputs.build }}" == "true" ]]; then
          TEMP_DIR=$(mktemp -d)
          cargo build --release --bin safenode-manager
          sudo mv target/release/safenode-manager /usr/local/bin
        else
          echo "Support for downloading the node manager will be implemented soon"
          exit 1
        fi

    - name: install testnet (windows)
      if: inputs.platform == 'windows-latest' && inputs.action == 'start'
      shell: pwsh
      run: |
        # This is a location that's on the Path variable on the GHA Windows machine.
        $destination = "C:\Users\runneradmin\AppData\Local\Microsoft\WindowsApps"
        $url = "https://sn-node-manager.s3.eu-west-2.amazonaws.com/safenode-manager-latest-x86_64-pc-windows-msvc.tar.gz"
        $downloadPath = "safenode-manager-latest-x86_64-pc-windows-msvc.tar.gz"
        $extractedTarPath = "C:\temp\safenode-manager-latest-x86_64-pc-windows-msvc.tar"
        $extractPath = "C:\temp\"

        if ("${{ inputs.build }}" -eq "true") {
          cargo build --release --bin safenode-manager
          Copy-Item .\target\release\safenode-manager.exe -Destination $destination
        } else {
          echo "Support for downloading the node manager will be implemented soon"
          exit 1
        }

    # Even though these two steps are the same, you seem required to specify a shell inside
    # an action, which doesn't seem to be the case in the calling workflow.
    - name: start testnet (Linux/macOS)
      if: inputs.platform != 'windows-latest' && inputs.action == 'start'
      shell: bash
      run: |
        command="safenode-manager "
        if [[ "${{ inputs.join }}" == "true" ]]; then
          command="$command local join "
        else
          command="$command local run "
        fi

        command="$command --count ${{ inputs.node-count }} "
        command="$command --node-path ${{ inputs.node-path }} "
        command="$command --faucet-path ${{ inputs.faucet-path }} "

        # These arguments are mutually exclusive, but `safenode-manager` will assert that at the
        # beginning, so there's no need for us to do it here.
        [[ -n "${{ inputs.owner }}" ]] && command="$command --owner ${{ inputs.owner }}"
        [[ -n "${{ inputs.owner-prefix }}" ]] && command="$command --owner-prefix ${{ inputs.owner-prefix }}"

        echo "Will run safenode-manager with: $command"
        eval $command

    - name: start testnet (Windows)
      if: inputs.platform == 'windows-latest' && inputs.action == 'start'
      shell: pwsh
      run: |
        $command = "safenode-manager "
        if ("${{ inputs.join }}" -eq "true") {
          $command += "local join "
        } else {
          $command += "local run "
        }

        $command += "--count ${{ inputs.node-count }} "
        $command += "--node-path ${{ inputs.node-path }} "
        $command += "--faucet-path ${{ inputs.faucet-path }} "

        if (-not [string]::IsNullOrEmpty("${{ inputs.owner }}")) {
          $command += "--owner ${{ inputs.owner }} "
        }

        $command += "--count ${{ inputs.node-count }} "
        $command += "--node-path ${{ inputs.node-path }} "
        $command += "--faucet-path ${{ inputs.faucet-path }} "

        if (-not [string]::IsNullOrEmpty("${{ inputs.owner }}")) {
          $command += "--owner ${{ inputs.owner }} "
        }
        if (-not [string]::IsNullOrEmpty("${{ inputs.owner-prefix }}")) {
          $command += "--owner-prefix ${{ inputs.owner-prefix }} "
        }

        Write-Host "Will run safenode-manager with: $command"
        Invoke-Expression $command

    - name: Set SAFE_PEERS (Linux)
      if: |
        inputs.platform == 'ubuntu-latest' &&
        inputs.action == 'start' &&
        inputs.set-safe-peers == 'true'
      shell: bash
      run: |
        manager_registry_path="/home/runner/.local/share/safe/local_node_registry.json"
        listen_addr=$(jq -r '.nodes[0].listen_addr[0]' $manager_registry_path)
        echo "listen_addr: $listen_addr"
        echo "SAFE_PEERS=$listen_addr" >> $GITHUB_ENV

    - name: Set SAFE_PEERS (macOS)
      if: |
        inputs.platform == 'macos-latest' &&
        inputs.action == 'start' &&
        inputs.set-safe-peers == 'true'
      shell: bash
      run: |
        manager_registry_path="/Users/runner/Library/Application Support/safe/local_node_registry.json"
        listen_addr=$(jq -r '.nodes[0].listen_addr[0]' "$manager_registry_path")
        echo "listen_addr: $listen_addr"
        echo "SAFE_PEERS=$listen_addr" >> $GITHUB_ENV

    - name: Set SAFE_PEERS (windows)
      if: |
        inputs.platform == 'windows-latest' &&
        inputs.action == 'start' &&
        inputs.set-safe-peers == 'true'
      shell: pwsh
      run: |
        $manager_registry_path = "C:\Users\runneradmin\AppData\Roaming\safe\local_node_registry.json"
        $listen_addr = jq -r '.nodes[0].listen_addr[0]' $manager_registry_path
        Write-Host "listen_addr: $listen_addr"
        Add-Content -Path $env:GITHUB_ENV -Value "SAFE_PEERS=$listen_addr"
    #
    # Stopping the Network
    #
    - name: Kill all nodes (unix)
      if: inputs.platform != 'windows-latest' && inputs.action == 'stop'
      shell: bash
      run: safenode-manager local kill --keep-directories

    - name: Kill all nodes (windows)
      if: inputs.platform == 'windows-latest' && inputs.action == 'stop'
      shell: pwsh
      run: safenode-manager local kill --keep-directories

    - name: Upload log files (Linux)
      if: inputs.platform == 'ubuntu-latest' && inputs.action == 'stop' && inputs.log_file_prefix != ''
      env:
        ROOT_DIR: "/home/runner/.local/share/safe"
      uses: actions/upload-artifact@main
      with:
        compression-level: 9
        name: ${{inputs.log_file_prefix}}_${{inputs.platform}}
        path: |
          ~/.local/share/safe/node/*/logs/*.log*
          ~/.local/share/safe/*/*/*.log*
          ~/.local/share/safe/client/logs/*/*.log*

    - name: Upload log files (macOs)
      if: inputs.platform == 'macos-latest' && inputs.action == 'stop' && inputs.log_file_prefix != ''
      uses: actions/upload-artifact@main
      with:
        compression-level: 9
        name: ${{inputs.log_file_prefix}}_${{inputs.platform}}
        path: |
          /Users/runner/Library/Application Support/safe/node/*/logs/*.log*
          /Users/runner/Library/Application Support/safe/*/*/*.log*
          /Users/runner/Library/Application Support/safe/client/logs/*/*.log*

    - name: Upload log files (Windows)
      if: inputs.platform == 'windows-latest' && inputs.action == 'stop' && inputs.log_file_prefix != ''
      uses: actions/upload-artifact@main
      with:
        compression-level: 9
        name: ${{inputs.log_file_prefix}}_${{inputs.platform}}
        path: |
          C:\Users\runneradmin\AppData\Roaming\safe\node\*\logs\*.log*
          C:\Users\runneradmin\AppData\Roaming\safe\*\*\*.log*
          C:\Users\runneradmin\AppData\Roaming\safe\client\logs\*\*.log*
