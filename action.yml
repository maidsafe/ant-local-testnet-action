name: Safe Local Testnet Action
description: Administer local testnets using the testnet binary
inputs:
  action:
    description: Start or stop a local testnet
    required: true
  build:
    description: Build the node manager from source. Useful for testing.
    type: boolean
    default: false
  faucet-path:
    description: The location of the faucet binary
  interval:
    description: Interval between node starts in milliseconds. Default is 1000.
    type: number
    default: 1000
  join:
    description: If set, any nodes that are launched will join an existing testnet.
    type: boolean
    default: false
  log_file_prefix:
    description: The prefix given to the log files that are uploaded. Logs are not uploaded if value not set.
  node-count: 
    description: The number of nodes for the testnet. Defaults to 25.
    type: number
    default: 25
  node-manager-branch:
    description: Use with the build argument to specify the branch to build
    default: main
  node-manager-repo-owner:
    description: Use with the build argument to specify the repository to use
    default: maidsafe
  node-path:
    description: The location of the node binary
  platform:
    description: The platform the action is running on
    required: true
  set-safe-peers:
    description: There are some cases where setting SAFE_PEERS must be skipped
    type: boolean
    default: true

runs:
  using: "composite"
  steps:
    #
    # Setup
    #
    - name: install ripgrep
      if: inputs.platform == 'ubuntu-latest'
      shell: bash
      run: sudo apt-get -y install ripgrep
    - name: install ripgrep mac
      if: inputs.platform == 'macos-latest'
      shell: bash
      run: brew install ripgrep
    - name: install ripgrep windows
      if: inputs.platform == 'windows-latest'
      shell: pwsh
      run: choco install ripgrep
    #
    # Starting the Network
    #
    - name: install testnet (linux)
      if: inputs.platform == 'ubuntu-latest' && inputs.action == 'start'
      env:
        NODE_MANAGER_URL: https://sn-node-manager.s3.eu-west-2.amazonaws.com/safenode-manager-latest-x86_64-unknown-linux-musl.tar.gz
      shell: bash
      run: |
        if [[ "${{ inputs.build }}" == "true" ]]; then
          TEMP_DIR=$(mktemp -d)
          git clone -b ${{ inputs.node-manager-branch }} \
            https://github.com/${{ inputs.node-manager-repo-owner }}/sn-node-manager \
            $TEMP_DIR/sn-node-manager
          cd $TEMP_DIR/sn-node-manager
          cargo build --release
          sudo mv target/release/safenode-manager /usr/local/bin
        else
          curl -L -O $NODE_MANAGER_URL
          mkdir node_manager
          tar xvf safenode-manager-latest-x86_64-unknown-linux-musl.tar.gz -C node_manager
          rm safenode-manager-latest-x86_64-unknown-linux-musl.tar.gz
          sudo mv node_manager/safenode-manager /usr/local/bin
          safenode-manager --version
        fi

    - name: install testnet (macOS)
      if: inputs.platform == 'macos-latest' && inputs.action == 'start'
      env:
        NODE_MANAGER_URL: https://sn-node-manager.s3.eu-west-2.amazonaws.com/safenode-manager-latest-x86_64-apple-darwin.tar.gz
      shell: bash
      run: |
        if [[ "${{ inputs.build }}" == "true" ]]; then
          TEMP_DIR=$(mktemp -d)
          git clone -b ${{ inputs.node-manager-branch }} \
            https://github.com/${{ inputs.node-manager-repo-owner }}/sn-node-manager \
            $TEMP_DIR/sn-node-manager
          cd $TEMP_DIR/sn-node-manager
          cargo build --release
          sudo mv target/release/safenode-manager /usr/local/bin
        else
          curl -L -O $NODE_MANAGER_URL
          mkdir node_manager
          tar xvf safenode-manager-latest-x86_64-apple-darwin.tar.gz -C node_manager
          rm safenode-manager-latest-x86_64-apple-darwin.tar.gz
          sudo mv node_manager/safenode-manager /usr/local/bin
          safenode-manager --version
        fi

    - name: install testnet (windows)
      if: inputs.platform == 'windows-latest' && inputs.action == 'start'
      shell: pwsh
      run: |
        # This is a location that's on the Path variable on the GHA Windows machine.
        $destination = "C:\Users\runneradmin\AppData\Local\Microsoft\WindowsApps"
        $url = "https://sn-node-manager.s3.eu-west-2.amazonaws.com/safenode-manager-latest-x86_64-pc-windows-msvc.tar.gz"
        $downloadPath = "safenode-manager-latest-x86_64-pc-windows-msvc.tar.gz"
        $extractedTarPath = "C:\temp\safenode-manager-latest-x86_64-pc-windows-msvc.tar"
        $extractPath = "C:\temp\"

        Invoke-WebRequest -Uri $url -OutFile $downloadPath
        7z e $downloadPath -o"$extractPath"
        7z x $extractedTarPath -o"$extractPath"
        Copy-Item ($extractPath + "safenode-manager.exe") -Destination $destination
        safenode-manager --version

    # Even though these two steps are the same, you seem required to specify a shell inside
    # an action, which doesn't seem to be the case in the calling workflow.
    - name: start testnet (Linux/macOS)
      if: inputs.platform != 'windows-latest' && inputs.action == 'start'
      shell: bash
      run: |
        if [[ "${{ inputs.join }}" == "true" ]]; then
          safenode-manager join \
            --count ${{ inputs.node-count }} \
            --node-path ${{ inputs.node-path }} \
            --faucet-path ${{ inputs.faucet-path }}
        else
          safenode-manager run \
            --count ${{ inputs.node-count }} \
            --node-path ${{ inputs.node-path }} \
            --faucet-path ${{ inputs.faucet-path }}
        fi

    - name: start testnet (Windows)
      if: inputs.platform == 'windows-latest' && inputs.action == 'start'
      shell: pwsh
      run: |
        if ("${{ inputs.join }}" -eq "true") {
          safenode-manager join `
            --count ${{ inputs.node-count }} `
            --node-path ${{ inputs.node-path }} `
            --faucet-path ${{ inputs.faucet-path }}
        } else {
          safenode-manager run `
            --count ${{ inputs.node-count }} `
            --node-path ${{ inputs.node-path }} `
            --faucet-path ${{ inputs.faucet-path }}
        }

    - name: Set SAFE_PEERS (Linux)
      if: |
        inputs.platform == 'ubuntu-latest' &&
        inputs.action == 'start' &&
        inputs.set-safe-peers == 'true'
      shell: bash
      run: |
        node_data_path="/home/runner/.local/share/safe/node"
        safe_peers=$(rg "listening on \".+\"" "$node_data_path" -u | rg '/ip4.*$' -m1 -o | rg '"' -r '')
        echo "SAFE_PEERS=$safe_peers" >> $GITHUB_ENV

    - name: Set SAFE_PEERS (macOS)
      if: |
        inputs.platform == 'macos-latest' &&
        inputs.action == 'start' &&
        inputs.set-safe-peers == 'true'
      shell: bash
      run: |
        node_data_path="/Users/runner/Library/Application Support/safe/node"
        safe_peers=$(rg "listening on \".+\"" "$node_data_path" -u | rg '/ip4.*$' -m1 -o | rg '"' -r '')
        echo "SAFE_PEERS=$safe_peers" >> $GITHUB_ENV

    - name: Set SAFE_PEERS (windows)
      if: |
        inputs.platform == 'windows-latest' &&
        inputs.action == 'start' &&
        inputs.set-safe-peers == 'true'
      shell: pwsh
      run: |
        $node_data_path = "C:\Users\runneradmin\AppData\Roaming\safe\node"
        $safe_peers = rg 'listening on ".+"' "$node_data_path" -u | `
            rg '/ip4.*$' -m1 -o
        $env:SAFE_PEERS = $safe_peers.Trim('"')
        Add-Content -Path $env:GITHUB_ENV -Value "SAFE_PEERS=$env:SAFE_PEERS"
    #
    # Stopping the Network
    #
    - name: Kill all nodes (unix)
      if: inputs.platform != 'windows-latest' && inputs.action == 'stop'
      shell: bash
      run: safenode-manager kill --keep-directories

    - name: Kill all nodes (windows)
      if: inputs.platform == 'windows-latest' && inputs.action == 'stop'
      shell: pwsh
      run: safenode-manager kill --keep-directories

    - name: Copy and Tar log files (Linux)
      if: inputs.platform == 'ubuntu-latest' && inputs.action == 'stop' && inputs.log_file_prefix != ''
      env:
        ROOT_DIR: "/home/runner/.local/share/safe"
      shell: bash
      run: |
        mkdir tmpdir
        cp -R "${ROOT_DIR}" tmpdir/
        find tmpdir -iname '*.log*' | tar -zcvf log_files.tar.gz --files-from -
        rm -r tmpdir

    - name: Copy and Tar log files (macOS)
      if: inputs.platform == 'macos-latest' && inputs.action == 'stop' && inputs.log_file_prefix != ''
      env:
        ROOT_DIR: "/Users/runner/Library/Application Support/safe"
      shell: bash
      run: |
        mkdir tmpdir
        cp -R "${ROOT_DIR}" tmpdir/
        find tmpdir -iname '*.log*' | tar -zcvf log_files.tar.gz --files-from -
        rm -r tmpdir

    - name: Tar log files (windows)
      if: inputs.platform == 'windows-latest' && inputs.action == 'stop' && inputs.log_file_prefix != ''
      shell: pwsh
      run: |
        $rootDirectory = "C:\Users\runneradmin\AppData\Roaming\safe"
        $sourceDirectories = @("${rootDirectory}\node", "${rootDirectory}\client")
        $extension = "*.log*"
        $destDirectory = Get-Location

        foreach ($sourceDirectory in $sourceDirectories) {
            if (!(Test-Path -Path $sourceDirectory)) {
                Write-Host "Directory $sourceDirectory does not exist, skipping"
                continue
            }

            $tempDirectory = New-Item -ItemType Directory -Force -Path "$destDirectory\temp"
            $logFiles = Get-ChildItem -Path $sourceDirectory -Filter $extension -Recurse -File

            $logFiles | ForEach-Object { 
                $dest = $tempDirectory.FullName + $_.FullName.SubString($sourceDirectory.length)
                $null = New-Item -ItemType File -Force -Path $dest
                Copy-Item -Path $_.FullName -Destination $dest 
            }

            $archiveName = ($sourceDirectory -split '\\')[-1] + '_log_files.tar.gz'

            Set-Location -Path $destDirectory
            7z a -ttar 'logs.tar' .\temp\*
            7z a -tgzip $archiveName 'logs.tar'

            Remove-Item -Recurse -Force 'temp'
            Remove-Item 'logs.tar'
        }
        
        # Convert all the generated compressed logs into a single tarball and then to a tar.gz
        $logFiles = Get-ChildItem . -Filter *_log_files.tar.gz 
        foreach ($file in $logFiles) {
            7z a -ttar 'logs.tar' $file.FullName
        }
        7z a -tgzip 'log_files.tar.gz' 'logs.tar'
        
        Remove-Item 'logs.tar'
        Remove-Item *_log_files.tar.gz

    - name: Upload node logs
      if: inputs.action == 'stop' && inputs.log_file_prefix != ''
      uses: actions/upload-artifact@main
      with:
        name: ${{inputs.log_file_prefix}}_${{inputs.platform}}
        path: log_files.tar.gz
